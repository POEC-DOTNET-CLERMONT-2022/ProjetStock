//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdus si
//     le code est regénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference2
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotificationDto", Namespace="http://schemas.datacontract.org/2004/07/ProjectStockDTOS")]
    public partial class NotificationDto : object
    {
        
        private System.Guid _idField;
        
        private System.DateTime sendAtField;
        
        private string textRappelField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid _id
        {
            get
            {
                return this._idField;
            }
            set
            {
                this._idField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime sendAt
        {
            get
            {
                return this.sendAtField;
            }
            set
            {
                this.sendAtField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string textRappel
        {
            get
            {
                return this.textRappelField;
            }
            set
            {
                this.textRappelField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IServiceNotification")]
    public interface IServiceNotification
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceNotification/GetNotifications", ReplyAction="http://tempuri.org/IServiceNotification/GetNotificationsResponse")]
        ServiceReference2.NotificationDto[] GetNotifications();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceNotification/GetNotifications", ReplyAction="http://tempuri.org/IServiceNotification/GetNotificationsResponse")]
        System.Threading.Tasks.Task<ServiceReference2.NotificationDto[]> GetNotificationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceNotification/GetById", ReplyAction="http://tempuri.org/IServiceNotification/GetByIdResponse")]
        ServiceReference2.NotificationDto GetById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceNotification/GetById", ReplyAction="http://tempuri.org/IServiceNotification/GetByIdResponse")]
        System.Threading.Tasks.Task<ServiceReference2.NotificationDto> GetByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceNotification/add", ReplyAction="http://tempuri.org/IServiceNotification/addResponse")]
        void add(ServiceReference2.NotificationDto userDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceNotification/add", ReplyAction="http://tempuri.org/IServiceNotification/addResponse")]
        System.Threading.Tasks.Task addAsync(ServiceReference2.NotificationDto userDto);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface IServiceNotificationChannel : ServiceReference2.IServiceNotification, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class ServiceNotificationClient : System.ServiceModel.ClientBase<ServiceReference2.IServiceNotification>, ServiceReference2.IServiceNotification
    {
        
        /// <summary>
        /// Implémentez cette méthode partielle pour configurer le point de terminaison de service.
        /// </summary>
        /// <param name="serviceEndpoint">Point de terminaison à configurer</param>
        /// <param name="clientCredentials">Informations d'identification du client</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceNotificationClient() : 
                base(ServiceNotificationClient.GetDefaultBinding(), ServiceNotificationClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IServiceNotification.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceNotificationClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceNotificationClient.GetBindingForEndpoint(endpointConfiguration), ServiceNotificationClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceNotificationClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceNotificationClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceNotificationClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceNotificationClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceNotificationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ServiceReference2.NotificationDto[] GetNotifications()
        {
            return base.Channel.GetNotifications();
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.NotificationDto[]> GetNotificationsAsync()
        {
            return base.Channel.GetNotificationsAsync();
        }
        
        public ServiceReference2.NotificationDto GetById(int id)
        {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.NotificationDto> GetByIdAsync(int id)
        {
            return base.Channel.GetByIdAsync(id);
        }
        
        public void add(ServiceReference2.NotificationDto userDto)
        {
            base.Channel.add(userDto);
        }
        
        public System.Threading.Tasks.Task addAsync(ServiceReference2.NotificationDto userDto)
        {
            return base.Channel.addAsync(userDto);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IServiceNotification))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Le point de terminaison nommé \'{0}\' est introuvable.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IServiceNotification))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:57973/ServiceNotification.svc");
            }
            throw new System.InvalidOperationException(string.Format("Le point de terminaison nommé \'{0}\' est introuvable.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServiceNotificationClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IServiceNotification);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServiceNotificationClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IServiceNotification);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IServiceNotification,
        }
    }
}
