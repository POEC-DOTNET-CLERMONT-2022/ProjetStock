// <auto-generated />
using System;
using ApiApplication.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiApplication.Migrations
{
    [DbContext(typeof(APIContext))]
    partial class APIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ProjectStockLibrary.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Addresses")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_address_line_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_address_line_2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_codePostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Addresses");

                    b.ToTable("_addresses");
                });

            modelBuilder.Entity("ProjectStockLibrary.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CryptoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("_expireToken")
                        .HasColumnType("datetime2");

                    b.Property<string>("_firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_siret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CryptoId");

                    b.ToTable("_users");
                });

            modelBuilder.Entity("ProjectStockLibrary.Crypto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("_value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("_cryptos");
                });

            modelBuilder.Entity("ProjectStockLibrary.Market", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CryptoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("_closingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("_openingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CryptoId");

                    b.ToTable("_markets");
                });

            modelBuilder.Entity("ProjectStockLibrary.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("_sendAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("_textRappel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("_notifs");
                });

            modelBuilder.Entity("ProjectStockLibrary.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("_nbStock")
                        .HasColumnType("int");

                    b.Property<DateTime>("_orderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("_orderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("_stockId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("_stockId");

                    b.ToTable("_orders");
                });

            modelBuilder.Entity("ProjectStockLibrary.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Stock")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Stocks")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_entrepriseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("_value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Stock");

                    b.HasIndex("Stocks");

                    b.ToTable("_stocks");
                });

            modelBuilder.Entity("ProjectStockLibrary.Address", b =>
                {
                    b.HasOne("ProjectStockLibrary.Client", null)
                        .WithMany("_addresses")
                        .HasForeignKey("Addresses");
                });

            modelBuilder.Entity("ProjectStockLibrary.Client", b =>
                {
                    b.HasOne("ProjectStockLibrary.Crypto", null)
                        .WithMany("_listClient")
                        .HasForeignKey("CryptoId");
                });

            modelBuilder.Entity("ProjectStockLibrary.Market", b =>
                {
                    b.HasOne("ProjectStockLibrary.Crypto", null)
                        .WithMany("_listMarket")
                        .HasForeignKey("CryptoId");
                });

            modelBuilder.Entity("ProjectStockLibrary.Order", b =>
                {
                    b.HasOne("ProjectStockLibrary.Stock", "_stock")
                        .WithMany()
                        .HasForeignKey("_stockId");

                    b.Navigation("_stock");
                });

            modelBuilder.Entity("ProjectStockLibrary.Stock", b =>
                {
                    b.HasOne("ProjectStockLibrary.Market", null)
                        .WithMany("_stock")
                        .HasForeignKey("Stock");

                    b.HasOne("ProjectStockLibrary.Client", null)
                        .WithMany("_stocks")
                        .HasForeignKey("Stocks");
                });

            modelBuilder.Entity("ProjectStockLibrary.Client", b =>
                {
                    b.Navigation("_addresses");

                    b.Navigation("_stocks");
                });

            modelBuilder.Entity("ProjectStockLibrary.Crypto", b =>
                {
                    b.Navigation("_listClient");

                    b.Navigation("_listMarket");
                });

            modelBuilder.Entity("ProjectStockLibrary.Market", b =>
                {
                    b.Navigation("_stock");
                });
#pragma warning restore 612, 618
        }
    }
}
